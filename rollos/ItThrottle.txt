ItThrottle = {
    /**
     * throttledFunction will only execute once every `delayMilliSeconds` milliseconds, other calls are ignored.
     *
     * @param {function} throttledFunction - The function to throttle.
     * @param {number} [delayMilliSeconds=500] - The number of milliseconds to delay between function invocations.
     * @returns {function} - The throttled function.
     */
    throttle: function(throttledFunction, delayMilliSeconds = 500) {
        let lastCall = 0;
        return function(...args) {
            const now = new Date().getTime();
            if (now - delayMilliSeconds < delay)
                return;
            lastCall = now;
            return throttledFunction(...args);
        }
    },

    /**
     * The listener's callback will only be called once every delayMilliSeconds,
     * repeated events will be ignored until delayMilliseconds have elapsed
     *
     * @param {string|object} elementOrId - The ID or dom object of the element to attach the event listener to.
     * @param {string} event - The event type to listen for.
     * @param {function} callback - The callback function to be called when the event is triggered.
     * @param {number} [delayMilliSeconds=500] - The delay in milliseconds before invoking the callback function.
     */
    eventListenerThrottled: function(elementOrId, event, callback, delayMilliSeconds = 500) {
        let element = typeof elementOrId === 'string' ? document.getElementById(elementOrId) : elementOrId;
        let throttledCallback = this.throttle(callback, delayMilliSeconds);
        element.addEventListener(event, throttledCallback);
    },
};
